name: Build Pacparser

on:
  push:
    branches: [ master ]
    paths:
      - 'src/**'
      - '.github/workflows/build.yml'
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to run workflow for'
        required: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      if: ${{ !contains(github.event_name, 'workflow_dispatch') }}
      with:
        fetch-depth: 0

    - name: Check out code for workflow_dispatch
      if: ${{ contains(github.event_name, 'workflow_dispatch') }}
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.tag }}

    - name: make non-windows
      if:  ${{ matrix.os != 'windows-latest' }}
      run: make -C src

    - name: make windows
      if:  ${{ matrix.os == 'windows-latest' }}
      run: make -C src -f Makefile.win32
      
    - name: make non-windows dist
      if:  ${{ matrix.os != 'windows-latest' }}
      run: |
        DESTDIR=dist PREFIX= make -C src install
        ls -R src/dist

    - name: make windows dist
      if:  ${{ matrix.os == 'windows-latest' }}
      run: |
        make -C src -f Makefile.win32 dist

    - name: Upload dist
      uses: actions/upload-artifact@v2
      with:
        name: pacparser-${{ matrix.os }}-dist
        path: src/dist
        
  python-module-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      if: ${{ !contains(github.event_name, 'workflow_dispatch') }}
      with:
        fetch-depth: 0

    - name: Check out code for workflow_dispatch
      if: ${{ contains(github.event_name, 'workflow_dispatch') }}
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        
    - name: make non-windows
      if:  ${{ matrix.os != 'windows-latest' }}
      run: make -C src pymod-dist

    - name: make windows
      if:  ${{ matrix.os == 'windows-latest' }}
      run: make -C src -f Makefile.win32 pymod-dist

    - name: Upload dist
      uses: actions/upload-artifact@v2
      with:
        name: pacparser-python-${{ matrix.python-version }}-${{ matrix.os }}-dist
        path: src/pymod/pacparser-python*

    - name: Build wheel non-linux
      if:  ${{ matrix.os != 'ubuntu-latest' }}
      run: |
        python -m pip install wheel
        cd src/pymod && python setup.py bdist_wheel
        
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          src:
            - 'src/**'

    - name: Publish package to PyPI (non-linux)
      if:  ${{ (matrix.os != 'ubuntu-latest') && (steps.changes.outputs.src == 'true') }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI }}
      run: |
        python -m pip install twine
        ls -R .
        twine upload src/pymod/dist/*
        
  build-linux-wheels:
    runs-on: 'ubuntu-latest'

    steps:
    - uses: actions/checkout@v2
      if: ${{ !contains(github.event_name, 'workflow_dispatch') }}
      with:
        fetch-depth: 0

    - name: Check out code for workflow_dispatch
      if: ${{ contains(github.event_name, 'workflow_dispatch') }}
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.tag }}

    - name: Set env
      run: echo "PACPARSER_VERSION=$(git describe --always --tags --candidate=100)" >> $GITHUB_ENV
  
    - name: Set up Python
      uses: actions/setup-python@v3
        
    - name: make
      run: make -C src pymod
      
    - name: Build sdist
      run: cd src/pymod && python setup.py sdist
      
    - name: Install cibuildwheel and twine
      run: python -m pip install cibuildwheel twine

    - name: Build wheel using cibuildwheel
      run: |
        cp src/spidermonkey/libjs.a src/pacparser.o src/pacparser.h src/pymod
        cd src/pymod && python -m cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: "cp{37,38,39,310}-manylinux*64"
        CIBW_ENVIRONMENT: "PACPARSER_VERSION=${{ env.PACPARSER_VERSION }}"
        
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          src:
            - 'src/**'

    - name: Publish package to PyPI
      if:  ${{ steps.changes.outputs.src == 'true' }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI }}
      run: |
        twine upload src/pymod/dist/*
        
